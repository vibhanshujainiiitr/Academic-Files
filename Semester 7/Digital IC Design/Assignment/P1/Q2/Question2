// Vibhanshu Jain
// CS19B1027
// HDL Assignment 1

// Y = x0h0 + x1h1 + ... + x9h9

// Question 2

// Time scale used
`timescale 1ns / 1ns

// Module declaration
module Question2 (input [3:0] x0,x1,x2,x3,x4,x5,x6,x7,x8,x9, input [3:0] h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,input clk, output reg [18:0] y);

    // Register declaration
    reg [18:0] y1,y2,y3,y4,y5,y6,y7,y8,y9,y10;

    // register for state
    reg state = 1'b0;


    // In order to complete logic, we will update the state value in every clock cycle
    // and then use the state value to update the register values

    always @(posedge clk)
        begin
            state = ~state;
        end
    
    // Now we will use the state value to update the register values

    always @(state)
        begin
            case(state)
                1:  begin
                        // Calculate all the mutliplications
                        y1 = x0*h0;
                        y2 = x1*h1;
                        y3 = x2*h2;
                        y4 = x3*h3;
                        y5 = x4*h4;
                        y6 = x5*h5;
                        y7 = x6*h6;
                        y8 = x7*h7;
                        y9 = x8*h8;
                        y10 = x9*h9;
                    end
                0:  begin
                        // Calculate all the summations
                        y = y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8 + y9 + y10;
                    end
            endcase
        end
endmodule