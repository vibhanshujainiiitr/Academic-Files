// Vibhanshu Jain
// CS19B1027
// HDL Assignment 1

// Y = x0h0 + x1h1 + ... + x9h9

// Question 3

// Time scale used
`timescale 1ns / 1ns

// Module declaration
module Question3 (input [3:0] x0,x1,x2,x3,x4,x5,x6,x7,x8,x9, input [3:0] h0,h1,h2,h3,h4,h5,h6,h7,h8,h9,input clk, input reset, output reg [18:0]y, output reg status);

    // Register declaration
    reg [18:0] y1,y2,y3,y4,y5,y6;

    // register for state
    reg [3:0] state = 0;
    

    always @(posedge clk)
        
    // if the system is in reset mode then all the registers are set to 0 
    // Now we will use the state value to update the register values

    if(reset == 1)
        begin
            state = 0;
            y1 <= 0;
            y2 <= 0;
            y3 <= 0;
            y4 <= 0;
            y5 <= 0;
            status <= 0;
        end

    else begin
        case(state)
            0: begin
                y1 <= x0*h0 + x1*h1;
                status <= 0;
            end

            1: begin
                y1 <= y1 + x2*h2;
                y2 <= x3*h3;
                status <= 0;
            end

            2: begin
                y1 <= y1 + y2;
                y3 <= x4*h4;
                y4 <= x5*h5;
                status <= 0; 
            end

            3: begin
                y3 <= y3 + y1;
                y5 <= x6*h6;
                y1 <= x7*h7;
                status <= 0;
            end

            4: begin
                y3 <= y3 + y4;
                y1 <= x8*h8;
                y6 <= x9*h9;
                status <= 0;
            end

            5: begin
                y3 <= y3 + y5;
                status <= 0;
            end

            6: begin
                y3 <= y3 + y2;
                status <= 0;
            end

            7: begin
                y3 <= y3 + y1;
                status <= 0;
            end

            8: begin
                y <= y3 + y6;
                status <= 0;
            end

            // default
            default: begin
                state = 0;
            end

        endcase

        // state update
        if(state == 8)
            state <= 0;
        else
            state <= state + 1;
    end
endmodule